#!/bin/bash
# Launch a cloud image with libvirt

# log functions
function log() {
  echo "$*" 1>&2
}

function fatal() {
  local exit_code="$1"
  shift
  echo "FATAL: $*" 1>&2
  exit "$exit_code"
}

# atexit handler
ATEXIT=()

function atexit() {
  ATEXIT+=( "$*" )
}

function _atexit_handler() {
  local EXPR
  for EXPR in "${ATEXIT[@]}"; do
    #log "atexit: $EXPR"
    eval "$EXPR"
  done
}

trap _atexit_handler EXIT

if [ -z "${VIRSH_DEFAULT_CONNECT_URI}" ]; then
  if [ $EUID -eq 0 ]; then
    log "Running as root: using system daemon"
    default_connect="qemu:///system"
  else
    log "Running as user: using session daemon"
    default_connect="qemu:///session"
  fi
fi

virsh="$(command -v virsh) -q --connect=${VIRSH_DEFAULT_CONNECT_URI:-$default_connect}"
qemuimg="$(command -v qemu-img)"
secrettool="$(command -v secret-tool)"
pwgen="$(command -v pwgen)"

_default_ram="4G"
_default_ram_for_video="6G"

# Default libvirt pool
_default_pool="default"

opt_efi=0
opt_video=0
opt_extra_disks=
opt_ram="${_default_ram}"
opt_ram_set=1
opt_windows=0
opt_installer=0
opt_user="$(id -u -n)"
opt_password="$($pwgen 20)"
opt_isopath=""
opt_cpus=2
opt_arch="x86_64"
opt_disk="100G"
opt_no_image=0
opt_no_boot=0
opt_dst_pool="$_default_pool"
opt_src_pool="$_default_pool"
opt_cfg_pool="$_default_pool"
opt_ssh_pubkey_file=""
opt_no_ssh_inject=0
opt_no_wait=0
opt_no_cloud_init=0
opt_print_xml=0
# Collect optional arguments
while [ -n "$1" ] ; do
    arg="$1"
    case $arg in
    # Flags (no parameter and should not use `shift`)
    --video)
      opt_video=1
      ;;
    --efi)
      opt_efi=1
      ;;
    --windows)
      # Setting for windows guests.
      opt_windows=1
      ;;
    --installer)
      # --installer makes a blank disk (100G) and mounts the requested image
      # as an ISO instead.
      opt_installer=1
      ;;
    --no-image)
      # --no-image skips mounting an ISO entirely
      # as an ISO instead.
      opt_no_image=1
      ;;
    --no-boot)
      # --no-boot exits immediately after making the VM.
      opt_no_boot=1
      ;;
    --no-ssh-inject)
      # Skip injecting SSH files
      opt_no_ssh_inject="1"
      ;;
    --no-wait)
      # Skip waiting for connection
      opt_no_wait="1"
      ;;
    --no-cloud-init)
      # Don't generate and attach the cloud init ISO
      opt_no_cloud_init="1"
      ;;
    --no-reboot)
      # Pass the --no-reboot flag to qemu
      opt_no_cloud_init="1"
      ;;
    --print-xml)
      # Print the domain XML before launch
      opt_print_xml="1"
      ;;
    # Arguments which take 1 parameter
    --cpus)
      shift
      opt_cpus="$1"
      ;;
    --extra-disks)
      shift
      opt_extra_disks="$1"
      ;;
    --disk)
      shift
      opt_disk="$1"
      ;;
    --ram)
      shift
      # Flag the RAM is set
      opt_ram_set=0
      opt_ram="$1"
      ;;
    --user)
      shift
      opt_user="$1"
      ;;
    --password)
      shift
      opt_password="$1"
      ;;
    --iso-path)
      shift
      opt_isopath="$1"
      ;;
    --arch)
      shift
      opt_arch="$1"
      ;;
    --dst-pool)
      shift
      opt_dst_pool="$1"
      ;;
    --src-pool)
      shift
      opt_src_pool="$1"
      ;;
    --init-pool)
      shift
      opt_cfg_pool="$1"
      ;;
    --ssh-pubkey-file)
      shift
      opt_ssh_pubkey_file="$1"
      ;;
    --help)
      cat << EOF 1>&2
$0 [image src name] [VM name]

  --efi           Configure the booting VM to boot with EFI and NVVARS.
  --video         Attach a video device to a standard VM
  --cpus          Specify number of CPUs (default 2)
  --extra-disks   Specify extra disks to attach as a comma (,) separated list of sizes (i.e. 100G)
                  Pass = to specify a source disk image from the source pool e.g. 10G=source.img
  --ram           Specify an alternate RAM size for the guest VM (bytes with prefix - i.e. 4G)
  --disk          Specify an alternate disk size for the root disk (bytes with prefix - i.e. 100G)
  --windows       Enable options for Windows guests (attach video with settings for 4K)
  --installer     Makes a blank disk and mounts the requested image as an ISO instead.
  --no-image      Do not mount any disk image (use with installer or when doing BOOTSTRAP)
  --no-boot       Do not try and boot the VM just make it.
  --user          Username of the new user to create in the image
  --password      Password of the new user to create in the image
  --iso-path      Output the cloud-init ISO to the supplied path. Do not start a VM.
  --arch          Specify the architecture (x86_64, arm64 or i386 - defaults to x86_64)
  --dst-pool      Specify the output pool for disk images
  --src-pool      Specify the pool for source images
  --cfg-pool      Specify the pool for cloud-init data
  --ssh-pubkey-file Specify the SSH public key file to be injected
  --no-ssh-inject Disable any injection of an SSH public key
  --no-wait       Do not wait for the image to become network reachable
  --no-cloud-init Do not output cloud-init boot data
  --no-reboot     Pass the --no-reboot flag to QEMU
  --help          Display this help text.

EOF
      exit 0
      ;;
    *)
      break
      ;;
    esac
    shift
done

arch=""
case "$opt_arch" in
  amd64|x86_64)
    log "Architecture: amd64 (x86_64)"
    arch="x86_64"
  ;;
  # i386)
  #   log "Architecture: i386 (x86)"
  #   arch="i386"
  # ;;
  arm64)
    log "Architecture: arm64 (aarch64)"
    arch="aarch64"
    ;;
  *)
    fatal 1 "Unknown architectue: $opt_arch"
  ;;
esac

if [ $opt_windows = 1 ]; then
  log "Forcing --video due to --windows flag"
  opt_video=1
fi

# Best effort image source
if [ $opt_installer = 0 ] && [ $opt_no_image = 1 ]; then
  log "Booting without a source image and without installer"
else
  image_src="$1"
  shift
fi

# Best effort image name
image_name="$1"
shift

if [ -n "$opt_isopath" ]; then
  image_src="ISOPATH"
fi

# if [ $opt_installer = 0 ] && [ $opt_no_image = 1 ]; then
#   fatal 1 "Cannot use --no-image without --installer"
# fi

if [ $opt_installer = 1 ] && [ $opt_no_image = 1 ]; then
  if [ -z "$image_name" ] && [ ! -z "$image_src" ]; then
    image_name=$image_src
    image_src=""
  fi
fi

# Convert ram bytes
# If --video is specified, bump the default to 6G
if [ $opt_ram_set = 1 ]; then
  opt_ram="${_default_ram_for_video}"
fi
ram_bytes=$(echo "$opt_ram" | numfmt --from=iec)

if [ -z "$image_name" ]; then
  image_name=lci-"$(dd if=/dev/urandom bs=1 count=6 2>/dev/null | base32 -w0 | cut -d'=' -f1 | tr '[:upper:]' '[:lower:]')"
fi

# Set disk capacity from option arg
capacity="$opt_disk"

# Hardcoded defaults
root_disk="lci.$image_name.root.qcow2"
default_user="$opt_user"
default_password="$opt_password"

timezone="$(timedatectl show -p Timezone | cut -d'=' -f2-)"

# Refresh storage pool before going further
if ! $virsh pool-refresh "$opt_dst_pool" 1> /dev/null 2>&1 ; then
  fatal 1 "Could not refresh destination pool: $opt_dst_pool"
fi
if ! $virsh pool-refresh "$opt_src_pool" 1> /dev/null 2>&1 ; then
  fatal 1 "Could not refresh source pool: $opt_src_pool"
fi
if ! $virsh pool-refresh "$opt_cfg_pool" 1> /dev/null 2>&1 ; then
  fatal 1 "Could not refresh config pool: $opt_cfg_pool"
fi

function get_ssh_public_key_for_user() {
  local user="$1"
  local user_home

  user_home=$(bash -c "cd ~$(printf %q "$user") && pwd")

  # Try several key types
  for keytype in $(ssh-keygen --help 2>&1 | grep -- '-t' | sed 's/-t//g' | tr -d ' []' | tr -s '|' ' '); do
    ssh_key_path="${user_home}/.ssh/id_${keytype}"
    if [ -e "$ssh_key_path" ]; then
      break
    fi
    ssh_key_path=
  done  

  if [ -z "$ssh_keypath" ]; then
    log "Did not find an SSH key path - looking for a public key which might use unconventional capability"
    for keytype in $(ssh-keygen --help 2>&1 | grep -- '-t' | sed 's/-t//g' | tr -d ' []' | tr -s '|' ' '); do
      ssh_key_path="${user_home}/.ssh/id_${keytype}.pub"
      if [ -e "$ssh_key_path" ]; then
        break
      fi
      ssh_key_path=
    done
    if [ -z "$ssh_key_path" ]; then
      fatal 1 "Did not find any usable public keys either. Consider setting --no-ssh-inject"
    fi
    cat "$ssh_key_path"
    return 0
  fi

  get_pass_script=$(mktemp)
  chmod +x "$get_pass_script"
  cat > "$get_pass_script" << EOF
#!/bin/bash
$secrettool lookup unique ssh-store:$ssh_key_path
EOF

  export SSH_ASKPASS="$get_pass_script"

  atexit rm -f "$get_pass_script"

  local ssh_authorized_key=$(echo "" | ssh-keygen -y -f "$ssh_key_path")
  if [ $? != 0 ]; then
    fatal 1 "Failed to get SSH public key from $ssh_key_path"
  fi

  echo "$ssh_authorized_key"
  return 0
}

if [ $opt_installer = 0 ] && [ $opt_no_cloud_init = 0 ]; then
  if [ $opt_no_ssh_inject = 0 ]; then
    if [ -z "${opt_ssh_pubkey_file}" ]; then
      log "Attempting to get SSH public key from user's private key (pass --no-ssh-inject to disable entirely)"
      if ! ssh_authorized_key=$(get_ssh_public_key_for_user "${opt_user}"); then
        fatal 1 "Failed to get the SSH public key for the given user: ${opt_user}"
      fi
    else
      log "Loading SSH key from file"
      ssh_authorized_key="$(head -n1 "${opt_ssh_pubkey_file}")"
    fi

    if [ -z "${ssh_authorized_key}" ]; then
      fatal 1 "Failed to find an SSH key to inject"
    fi
    log "SSH authorized key will be injected: ${ssh_authorized_key}"
  else
    log "Not attempting SSH key injection"
    ssh_authorized_key=""
  fi

  ssh_key_block1=
  ssh_key_block2=
  if [ -n "${ssh_authorized_key}" ]; then
    read -r -d '' ssh_key_block1 << EOF
    ,
      "public_keys": {
        "default": "${ssh_authorized_key}"
      }
EOF
    read -r -d '' ssh_key_block2 << EOF
ssh_authorized_keys:
- ${ssh_authorized_key}
EOF
  fi

  prep_dir="$(mktemp -p "" -d "lci.$image_name.userdata.XXXXXXXXXX")"
  if [ $? != 0 ]; then
    fatal 1 "Failed to create temporary directory"
  fi

  if [ -z "$prep_dir" ]; then
    fatal 1 "Got empty directory for $prep_dir"
  fi

  atexit "rm -rf $prep_dir"

  # Build the config-drive data structure
  mkdir -p "${prep_dir}/openstack/2012-08-10"
  mkdir -p "${prep_dir}/openstack/content"
  mkdir -p "${prep_dir}/ec2"
  ln -s "${prep_dir}/openstack/2012-08-10" "${prep_dir}/openstack/latest"
  ln -s "${prep_dir}/openstack/latest" "${prep_dir}/ec2/latest"

  config_dir="${prep_dir}/openstack/2012-08-10"

  cat > "${config_dir}/meta_data.json" << EOF
{
  "uuid": "$image_name",
  "hostname": "$image_name",
  "meta": {
    "name": "$image_name",
    "admin_username": "$default_user",
    "admin_pass": "$default_password",
    "random_seed": "$(dd if=/dev/urandom bs=512 count=1 2>/dev/null | base64 -w0)"
  }${ssh_key_block1}
}
EOF

  cat > "${prep_dir}/openstack/2012-08-10/user_data" << EOF
#cloud-config
resize_rootfs: True
ssh_pwauth: True
timezone: $timezone

system_info:
  default_user:
    name: "$default_user"

${ssh_key_block2}

final_message: "launch-cloud-image: SYSTEM READY"
EOF


  # Build the user data ISO

  isopath=$(mktemp -p "" --suffix=.iso "lci.$image_name.userdata.XXXXXXXXX")
  if [ $? != 0 ]; then
    fatal 1 "Failed to create temporary ISO"
  fi

  if [ -z "$isopath" ]; then
    fatal 1 "Got empty path for $isopath"
  fi

  atexit rm -f "$isopath"

  isoname=$(basename "$isopath")

  if ! xorriso \
        -outdev "$isopath" \
        -blank as_needed \
        -volid config-2 \
        -joliet on \
        -follow on \
        -map "${prep_dir}" "/" \
        -commit \
        -close \
        ; then
    fatal 1 "Error generating config-drive ISO."
  fi

  if [ -n "$opt_isopath" ] ; then
    log "Outputting cloudinit ISO and exiting"
    cp -f "$isopath" "$opt_isopath"
    exit 0
  fi

  # Upload the ISO to the pool then clean up
  isosize=$(stat --format "%s" "$isopath")
  if [ $? != 0 ]; then
    fatal 1 "Could not stat $isopath"
  fi

  if ! $virsh vol-create-as --pool "$opt_cfg_pool" --name "$isoname" --format raw --capacity "$isosize" 1>&2 ; then
    fatal 1 "Could not create ISO volume in $opt_cfg_pool pool"
  fi

  # Upload to volume
  if ! $virsh vol-upload --pool "$opt_cfg_pool" --offset 0 --length "$isosize" "$isoname" "$isopath" 1>&2 ; then
    $virsh vol-delete --pool "$opt_cfg_pool" "$isoname" || log "Failed to delete $isoname. Please delete manually."
    fatal 1 "Could not upload to ISO volume"
    
  fi

  # Set an exit handler to destory the image if creation fails.
  vm_created=0
  atexit "[ \${vm_created} = 0 ] && ( $virsh vol-delete --pool "$opt_cfg_pool" "$isoname" )"

else
  # In installer mode, the isoname becomes the image src name
  isoname="$image_src"
fi

# Controls whether we clean up disks after a failure.
disks_in_use=0

function get_backing_volume() {
  local vol_entry="$1"
  shift
  local backing_vol=""
  while read -r vol_entry; do
    vol_name="$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f1)"
    if [ "$vol_name" = "$image_src" ]; then
      backing_vol=$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f2)
      break
    fi
  done < <($virsh vol-list --pool "$opt_src_pool")
  echo "$backing_vol"
  return 0
}

# Setup the VM disks
if [ $opt_installer = 0 ] && [ $opt_no_image = 0 ]; then
  # Get the backing volume.
  backing_vol="$(get_backing_volume "$image_src")"

  if [ -z "$backing_vol" ]; then
    fatal 1 "Volume $image_src could not be located in the $opt_src_pool pool."
  fi

  if [ ! -e "$backing_vol" ]; then
    fatal 1 "Volume $image_src at $backing_vol could does not exist or is inaccessible."
  fi

  # Determine the type of backing format
  backing_image_format=$( $qemuimg info "$backing_vol" | grep -F "file format: " | head -n1 | cut -d":" -f2 | tr -d ' ' )
  if [ -z "$backing_image_format" ] ; then
    fatal 1 "Could not determine backing image format."
  fi

  log "Create root disk with capacity: $root_disk $capacity (backed by $backing_vol - $backing_image_format)"
  if ! $virsh vol-create-as \
      --pool "$opt_dst_pool"  \
      --name "$root_disk"  \
      --format qcow2  \
      --backing-vol "$backing_vol"  \
      --backing-vol-format "$backing_image_format" \
      --capacity "$capacity" 1>&2 ; then
    fatal 1 "Could not create machine attached volume."
  fi
else
  # Installer mode - make a blank disk.
  log "Create root disk with capacity: $root_disk $capacity"
  if ! $virsh vol-create-as \
      --pool "$opt_dst_pool"  \
      --name "$root_disk"  \
      --format qcow2  \
      --capacity "$capacity" \
      --allocation 0 1>&2 ; then
    fatal 1 "Could not create machine attached volume."
  fi
fi
atexit "[ \${disks_in_use} = 0 ] && ( $virsh vol-delete --pool "$opt_dst_pool" "$root_disk" )"

extra_disks=()
if [ ! -z "$opt_extra_disks" ]; then
  i=0
  disk_failure=0
  while read -r diskspec; do
    i=$((i+1))

    IFS="=" read -r diskspec_size diskspec_src < <(echo "$diskspec")

    extra_disk_path="lci.$image_name.disk-${i}.qcow2"
    if [ ! -z $diskspec_src ]; then
      local_backing_vol="$(get_backing_volume "$diskspec_src")"

      if [ -z "$local_backing_vol" ]; then
        fatal 1 "Volume $diskspec_src could not be located in the $opt_src_pool pool."
      fi

      local_backing_image_format=$( $qemuimg info "$local_backing_vol" | grep -F "file format: " | head -n1 | cut -d":" -f2 | tr -d ' ' )

      if [ -z "$local_backing_image_format" ] ; then
        fatal 1 "Could not determine backing image format for diskspec: $diskspec"
      fi

      log "Create extra disk with capacity: $extra_disk_path $capacity (backed by $local_backing_vol - $local_backing_image_format)"
      if ! $virsh vol-create-as \
        --pool "$opt_dst_pool" \
        --name "${extra_disk_path}" \
        --format qcow2 \
        --backing-vol "$local_backing_vol"  \
        --backing-vol-format "$local_backing_image_format" \
        --capacity "$diskspec_size" \
        1>&2 ; then
        disk_failure=1
      fi
    else
      log "Create extra disk with capacity: $extra_disk_path $capacity"
      if ! $virsh vol-create-as \
        --pool "$opt_dst_pool" \
        --name "${extra_disk_path}" \
        --format qcow2 \
        --capacity "$diskspec_size" \
        --allocation 0 \
        --prealloc-metadata 1>&2 ; then
        disk_failure=1
      fi
    fi
    atexit "[ \${disks_in_use} = 0 ] && ( $virsh vol-delete --pool \"$opt_dst_pool\" \"$extra_disk_path\" )"
    extra_disks+=( "${extra_disk_path}" )

  done < <(echo "$opt_extra_disks" | tr ',' '\n')

  if [ $disk_failure != 0 ]; then
    fatal $disk_failure "Error while creating extra disks for VM"
  fi
fi


log "User Login: $default_user" 

# Setup the VM

declare -A volnameMap
declare -A srcVolnameMap
declare -A cfgVolnameMap

while read vol_entry; do
  vol_name=$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f1)
  vol_path=$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f2)
  volnameMap["$vol_name"]="$vol_path"
done < <($virsh vol-list --pool "$opt_dst_pool")

while read vol_entry; do
  vol_name=$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f1)
  vol_path=$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f2)
  srcVolnameMap["$vol_name"]="$vol_path"
done < <($virsh vol-list --pool "$opt_src_pool")

while read vol_entry; do
  vol_name=$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f1)
  vol_path=$(echo "$vol_entry" | tr -s ' ' | cut -d' ' -f2)
  cfgVolnameMap["$vol_name"]="$vol_path"
done < <($virsh vol-list --pool "$opt_cfg_pool")

root_disk_path=${volnameMap[$root_disk]}
log "Root disk path: $root_disk_path"

iso_file_path=
if [ $opt_no_image = 0 ]; then
  if [ $opt_installer = 0 ]; then
    # Default mode - use cfg path
    iso_file_path=${cfgVolnameMap[$isoname]}
  else 
    # Installer mode - use src path
    iso_file_path=${srcVolnameMap[$isoname]}
  fi

  if [ -z "$iso_file_path" ]; then
    if [ $opt_installer = 0 ] && [ $opt_no_cloud_init = 0 ]; then
      fatal 1 "Failed to set an ISO file"
    else
      log "Cloud-init disabled"
    fi
  else 
    log "ISO file path: $iso_file_path"
  fi
fi

libvirt_root=/var/lib/libvirt
if [ "$($virsh uri)" = "qemu:///session" ]; then
  libvirt_root="$HOME/.local/share/libvirt"
fi

if [ $opt_efi = 1 ]; then
  nvram_path="${libvirt_root}/qemu/nvram"
  efi_vars_path="${nvram_path}/$(basename "$root_disk_path")_VARS.fd"
  log "EFI vars path: ${efi_vars_path}"
fi

mac_addr="$(echo -n 52:54:00; dd bs=1 count=3 if=/dev/random 2>/dev/null |hexdump -v -e '/1 ":%02X"')"
vm_name="${image_name}"

disk_xml=
alphas=( {a..z} )
i=0
for extra_disk_path in "${extra_disks[@]}"; do
  i=$((i+1))
    read -r -d '' disk_xml << EOF
${disk_xml}
<disk type='file' device='disk'>
  <driver name='qemu' type='qcow2'/>
  <source file='${volnameMap[$extra_disk_path]}'/>
  <target dev='vd${alphas[i]}' bus='virtio'/>
</disk>
EOF
done

xml_def=$(mktemp -p "" "lci.$image_name.XXXXXXXXXX.xml")
if [ -z "$xml_def" ]; then
  fatal 1 "Could not create XML definition file."
fi

atexit rm -f "$xml_def"

# Ensure the shared home dir exists
# mkdir -p "${HOME}/shared/${image_name}"
# chmod 750 "${HOME}/shared/${image_name}"

# mkdir -p "${HOME}/shared/${image_name}/.ssh"
# chmod 700 "${HOME}/shared/${image_name}/.ssh"

# mkdir -p "${HOME}/shared/${image_name}/.gnupg"
# chmod 700 "${HOME}/shared/${image_name}/.gnupg"

if [ $opt_efi = 1 ]; then
  mkdir -p "$nvram_path"

  log "Configuring EFI code block"
  case "$arch" in
    aarch64)
      log "aarch64 EFI Architecture selected"
      nvram1='<loader readonly="yes" type="pflash">/usr/share/AAVMF/AAVMF_CODE.fd</loader>'
    ;;
    x86_64)
      log "x86_64 EFI Architecture selected"
      nvram1='<loader readonly="yes" type="pflash">/usr/share/OVMF/OVMF_CODE_4M.fd</loader>'
    ;;
  esac

  # Check if the image has existing VARs
  if [ -e "${nvram_path}/${image_src}_VARS.fd" ]; then
    log "Image has existing EFI variables - copying: ${nvram_path}/${image_src}_VARS.fd"
    cp "${nvram_path}/${image_src}_VARS.fd" "${efi_vars_path}"
  else 
    log "No existing EFI variables. Initializing new ones."
    case "$arch" in
      aarch64)
        cp "/usr/share/AAVMF/AAVMF_VARS.fd" "${efi_vars_path}"
      ;;
      x86_64)
        cp "/usr/share/OVMF/OVMF_VARS_4M.fd" "${efi_vars_path}"
      ;;
    esac

  fi
  nvram2="<nvram>${efi_vars_path}</nvram>"
else
  nvram1=""
  nvram2=""
fi

video_xml=""
if [ $opt_video = 1 ]; then
  # 3D Acceleration doesn't really work well, but QXL seems broken
  # on newer Linux kernels.
  read -r -d '' video_xml << EOF
    <graphics type='spice'>
      <listen type="none"/>
      <image compression='off'/>
      <!-- <gl enable="yes"/> -->
    </graphics>
    <video>
      <model type="virtio" heads="1" primary="yes">
        <acceleration accel3d="no"/>
      </model>
    </video>
EOF
fi

features_xml=""
read -r -d '' features_xml << EOF
    <acpi/>
    <vmport state='off'/>
EOF
clock_offset="utc"
if [ $opt_windows = 1 ]; then
  clock_offset="localtime"
  read -r -d '' video_xml << EOF
    <graphics type='spice'>
      <listen type="none"/>
      <image compression='off'/>
    </graphics>
    <video>
      <model type="qxl" ram="65536" vram="65536" vgamem="16384" heads="1" primary="yes"/>
    </video>
EOF

  read -r -d '' features_xml << EOF
    <acpi/>
    <vmport state='off'/>
    <hyperv>
      <relaxed state='on'/>
      <vapic state='on'/>
      <spinlocks state='on' retries='8191'/>
      <vpindex state='on'/>
      <synic state='on'/>
      <stimer state='on'/>
      <reset state='on'/>
      <vendor_id state='on' value='1234567890ab'/>  <!-- nvidia error code 43 prevention -->
      <frequencies state='on'/>
    </hyperv>
EOF
fi

# Default CPU config
cpu_cores=$((opt_cpus / 2))
if [ $cpu_cores = 0 ]; then
  log "CPU cores became 0 - forcing to 1"
  cpu_cores=1
fi

cpu_threads=2
if [ $((opt_cpus / 2)) = 0 ]; then
  cpu_threads=1
fi

qemu_args_xml=""
read -r -d '' qemu_args_xml << EOF
  <qemu:commandline>
    <qemu:arg value='-no-reboot'/>
  </qemu:commandline>
EOF

log "Set CPU topology: ${cpu_cores} cores with ${cpu_threads} threads"

cpu_xml=""
read -r -d '' cpu_xml << EOF
  <os>
    <type arch="x86_64" machine="pc-i440fx-4.0">hvm</type>
    $nvram1
    $nvram2
    <bios useserial='yes'/>
  </os>
  <cpu mode="custom" match="exact" check="none">
    <model fallback="allow">EPYC</model>
    <topology sockets="1" dies="1" cores="${cpu_cores}" threads="${cpu_threads}"/>
    <feature policy='require' name='topoext'/>
  </cpu>
EOF
emulator="/usr/bin/qemu-system-x86_64"
virt_type="kvm"

controller_xml=""
read -r -d '' controller_xml << EOF
<controller type="pci" index="0" model="pci-root"/>
EOF

clock_xml=""
read -r -d '' clock_xml << EOF
  <clock offset='$clock_offset'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
    <timer name='hypervclock' present='yes'/>
    <timer name='tsc' present='yes' mode='native'/>
  </clock>
EOF

pm_xml=""
read -r -d '' pm_xml << EOF
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
EOF

serial_xml=""
read -r -d '' serial_xml << EOF
    <serial type='pty'>
      <target type='isa-serial' port='0'>
        <model name='isa-serial'/>
      </target>
    </serial>
EOF

input_xml=""
read -r -d '' input_xml << EOF
    <input type='tablet' bus='usb'/>
    <input type='mouse' bus='ps2'/>
EOF

# # Was i386 requested?
# if [ "$arch" = "i386" ]; then
#   read -r -d '' cpu_xml << EOF
#   <os>
#     <type arch="i686" machine="pc-i440fx-2.1">hvm</type>
#     $nvram1
#     $nvram2
#   </os>
#   <cpu mode="custom" match="exact" check="none">
#     <model fallback="allow">EPYC</model>
#     <topology sockets="1" dies="1" cores="${cpu_cores}" threads="${cpu_threads}"/>
#     <feature policy='require' name='topoext'/>
#   </cpu>
# EOF

#   read -r -d '' features_xml << EOF
#     <pae/>
#     <gic version='2'/>
# EOF

#   read -r -d '' controller_xml << EOF
#   <controller type="pci" index="0" model="pcie-root"/>
# EOF

#   read -r -d '' clock_xml << EOF
#   <clock offset='$clock_offset'>
#     <timer name='rtc' tickpolicy='catchup'/>
#     <timer name='pit' tickpolicy='delay'/>
#     <timer name='hpet' present='no'/>
#   </clock>
# EOF

#   pm_xml=""

#   read -r -d '' serial_xml << EOF
#     <serial type='pty'>
#       <target type='pci-serial' port='0'>
#         <model name='pci-serial'/>
#       </target>
#     </serial>
# EOF

# read -r -d '' input_xml << EOF
#     <input type='tablet' bus='usb'/>
#     <input type='mouse' bus='usb'/>
# EOF

#   emulator="/usr/bin/qemu-system-i386"
#   virt_type="qemu"
# fi

# Was arm requested?
if [ "$arch" = "aarch64" ]; then
  read -r -d '' cpu_xml << EOF
  <os>
    <type arch="aarch64" machine="virt">hvm</type>
    $nvram1
    $nvram2
    <bios useserial='yes'/>
  </os>
  <cpu mode='custom' match='exact' check='none'>
    <model fallback='allow'>cortex-a53</model>
  </cpu>
EOF

  read -r -d '' features_xml << EOF
    <pae/>
    <gic version='2'/>
EOF

  read -r -d '' controller_xml << EOF
  <controller type="pci" index="0" model="pcie-root"/>
EOF

  read -r -d '' clock_xml << EOF
  <clock offset='$clock_offset'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
EOF

  pm_xml=""

  read -r -d '' serial_xml << EOF
    <serial type='pty'>
      <target type='pci-serial' port='0'>
        <model name='pci-serial'/>
      </target>
    </serial>
EOF

read -r -d '' input_xml << EOF
    <input type='tablet' bus='usb'/>
    <input type='mouse' bus='usb'/>
EOF

  emulator="/usr/bin/qemu-system-aarch64"
  virt_type="qemu"
fi

spice_vmc=""
if [ $opt_video = 1 ]; then
  read -r -d '' spice_vmc << EOF
    <channel type='spicevmc'>
      <target type='virtio' name='com.redhat.spice.0'/>
    </channel>
    <redirdev bus='usb' type='spicevmc'/>
EOF
fi

root_boot_order_xml='<boot order="1"/>'
cd_boot_order_xml=
if [ $opt_installer = 1 ]; then
  root_boot_order_xml='<boot order="1"/>'
  cd_boot_order_xml='<boot order="2"/>'
fi

if [ -n "$iso_file_path" ]; then
log "Attaching ISO file to VM: $iso_file_path"
read -r -d '' cd_xml << EOF
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw' io='native' cache='none'/>
      <source file='${iso_file_path}'/>
      <backingStore/>
      <target dev='sda' bus='sata'/>
      ${cd_boot_order_xml}
    </disk>
EOF
else
log "No ISO file being attached"
read -r -d '' cd_xml << EOF
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw' io='native' cache='none'/>
      <backingStore/>
      <target dev='sda' bus='sata'/>
      ${cd_boot_order_xml}
    </disk>
EOF
fi

cat << EOF > "$xml_def"
<domain type='$virt_type'>
  <name>${vm_name}</name>
  <memory unit='B'>$ram_bytes</memory>
  <memoryBacking>
    <source type="memfd"/>
    <access mode="shared"/>
  </memoryBacking>
  <currentMemory unit='B'>$ram_bytes</currentMemory>
  <vcpu placement='auto'>${opt_cpus}</vcpu>
  <numatune>
    <memory mode='strict' placement='auto'/>
  </numatune>
  <iothreads>${opt_cpus}</iothreads>
  <!-- TODO: cputune from system data -->
  $cpu_xml
  <features>
    <apic/>
    $features_xml
  </features>
  $clock_xml
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  $pm_xml
  <devices>
    <emulator>$emulator</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2' io='native' cache='none' discard='unmap' iothread='1'/>
      <source file='${root_disk_path}'/>
      <target dev='vda' bus='virtio'/>
      ${root_boot_order_xml}
    </disk>
    
    $cd_xml

    $disk_xml

    <controller type='usb' index='0' model='qemu-xhci' ports='15'/>
    <controller type='sata' index='0'/>
    $controller_xml
    <controller type='virtio-serial' index='0'/>
    <interface type='bridge'>
      <mac address='${mac_addr}'/>
      <source bridge='virbr0'/>
      <target dev='tap0'/>
      <model type='virtio'/>
    </interface>
    $serial_xml
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
    </channel>
    $spice_vmc
    $input_xml
    <tpm model="tpm-crb">
      <backend type="emulator" version="2.0"/>
    </tpm>
    <memballoon model='virtio'/>
    <rng model='virtio'>
      <backend model='random'>/dev/urandom</backend>
    </rng>

    $video_xml
  </devices>
  $qemu_args_xml
</domain>
EOF

if [ $opt_print_xml = 1 ]; then
  log "==STA XML DEFINITION=="
  cat "$xml_def"
  log "==END XML DEFINITION=="
fi

if ! $virsh define --file "${xml_def}" 1>&2; then
  fatal 1 "Failed to create the new virtual machine definition"
fi

# ISO deletion no longer allowed
disks_in_use=1
vm_created=1 
log "Virtual machine created as: ${vm_name}"

if [ $opt_no_boot = 1 ]; then
  log "Not booting VM by user request."
  exit 0
else
  if ! $virsh start "${vm_name}" 1>&2 ; then
    fatal 1 "Failed to start the new virtual machine"
  fi
fi

if [ $opt_installer = 1 ]; then
  echo "Waiting for VM to shutdown for installation to be complete"
  while true; do
    state=$($virsh dominfo "${vm_name}" | grep State: | tr -s ' ' | cut -d' ' -f2-)
    if [ "$state" != "running" ]; then
      # Enter a loop where we check the shutdown is permanent
      for i in {1..3}; do
        sleep 1
        state=$($virsh dominfo "${vm_name}" | grep State: | tr -s ' ' | cut -d' ' -f2-)
        if [ "$state" != "running" ] && [ "$i" -eq 3 ]; then
          echo "Installation complete (VM shutdown detected)"
          exit 0
        fi
      done
    fi
  done
else
  # Normal case - do SSH setup.
  vm_dns="${vm_name}.default.libvirt"

  # Write the machine hostname to stdout.
  echo "${vm_dns}" : "$default_user" : "$default_password"

if [ $opt_no_wait = 0 ]; then
    # Wait for the machine to boot to SSH completion
    while ! host -W 1 "${vm_dns}" 1>/dev/null 2>&1 ; do
      sleep 0.5
    done

    if [ $opt_windows = 0 ]; then
      while ! nc -z "${vm_dns}" 22 1>/dev/null 2>&1 ; do
        sleep 0.5
      done
    else
      while ! nc -z "${vm_dns}" 5986 1>/dev/null 2>&1 ; do
        sleep 0.5
      done
    fi  

    vm_ip="$(host "${vm_dns}" | cut -d' ' -f4)"
    if [ $? != 0 ]; then
      fatal 1 "VM IP failed to be resolved."
    fi

    # Inject the new machine into the current users known_hosts and remove any other entries
    # TODO: hide output except on error.
    ssh-keygen -R "${vm_dns}" >/dev/null 2>&1
    ssh-keygen -R "${vm_ip}" >/dev/null 2>&1
    ssh-keygen -R "${vm_dns},${vm_ip}" >/dev/null 2>&1

    { 
      ssh-keyscan -H "${vm_dns},${vm_ip}" 2>/dev/null
      ssh-keyscan -H "${vm_ip}" 2>/dev/null
      ssh-keyscan -H "${vm_dns}" 2>/dev/null
    } >> "$HOME/.ssh/known_hosts"

  fi

  # TODO: Create an ansible-like inventory file entry for the machine.
  # The idea is you just do cat *.inventory > inventory to build something to work with.
fi
